{"ast":null,"code":"import { db, storage } from '../services/firebase.js'; // Add uid for a valid employee to employee database\n\nconst addEmployeeUserIDToDB = user => {\n  db.collection('EmployeeDatabase').doc(user.email).update({\n    uid: user.uid\n  });\n}; // Check if employee is valid or not\n\n\nexport const checkEmployeeExists = (user, setIsEmployee) => {\n  const userEmail = user.email;\n  const docRef = db.collection('EmployeeDatabase').doc(userEmail);\n  docRef.get().then(doc => {\n    if (doc.exists) {\n      setIsEmployee(true);\n      addEmployeeUserIDToDB(user);\n    } else setIsEmployee(false);\n  }).catch(error => alert(`The following error was thrown: ${error}. Please contact support.`));\n}; // Employee Personal Information\n\nexport const postEmployeePersonalInfo = (uid, formData) => {\n  db.collection('EmployeePersonalInfo').doc(uid).update(formData);\n};\nexport const getEmployeePersonalInfo = (uid, setPersonalData) => {\n  const docRef = db.collection('EmployeePersonalInfo').doc(uid);\n  docRef.get().then(doc => {\n    if (doc.exists) setPersonalData(doc.data());\n  }).catch(error => alert(`The following error was thrown: ${error}. Please contact support.`));\n}; // Employee Academic Information\n\nexport const postEmployeeAcademicInfo = (uid, formData) => {\n  db.collection('EmployeeAcademicInfo').doc(uid).set(formData);\n};\nexport const getEmployeeAcademicInfo = (uid, setAcademicData) => {\n  const docRef = db.collection('EmployeeAcademicInfo').doc(uid);\n  docRef.get().then(doc => {\n    if (doc.exists) setAcademicData(doc.data());\n  }).catch(error => alert(`The following error was thrown: ${error}. Please contact support.`));\n}; // Employee Work Information\n\nexport const postEmployeeWorkInfo = (uid, formData) => {\n  db.collection('EmployeeWorkInfo').doc(uid).set(formData);\n};\nexport const getEmployeeWorkInfo = (uid, setWorkData) => {\n  const docRef = db.collection('EmployeeWorkInfo').doc(uid);\n  docRef.get().then(doc => {\n    if (doc.exists) setWorkData(doc.data());\n  }).catch(error => alert(`The following error was thrown: ${error}. Please contact support.`));\n};\nexport const getEmployeeProprietaryWorkInfo = (userEmail, setProprietaryWorkData) => {\n  const docRef = db.collection('EmployeeDatabase').doc(userEmail);\n  docRef.get().then(doc => {\n    if (doc.exists) setProprietaryWorkData(doc.data());\n  }).catch(error => alert(`The following error was thrown: ${error}. Please contact support.`));\n}; // Employee Skill Information\n\nexport const postEmployeeSkillInfo = (uid, formData) => {\n  db.collection('EmployeeSkillInfo').doc(uid).set(formData);\n};\nexport const getEmployeeSkillInfo = (uid, setSkillData) => {\n  const docRef = db.collection('EmployeeSkillInfo').doc(uid);\n  docRef.get().then(doc => {\n    if (doc.exists) setSkillData(doc.data());\n  }).catch(error => alert(`The following error was thrown: ${error}. Please contact support.`));\n}; // Employee Bank Information\n\nexport const postEmployeeBankInfo = (uid, formData) => {\n  db.collection('EmployeeBankInfo').doc(uid).set(formData);\n};\nexport const getEmployeeBankInfo = (uid, setBankData) => {\n  const docRef = db.collection('EmployeeBankInfo').doc(uid);\n  docRef.get().then(doc => {\n    if (doc.exists) setBankData(doc.data());\n  }).catch(error => alert(`The following error was thrown: ${error}. Please contact support.`));\n}; // List all supervised employees under an employee\n// Send data back as - List of Objects - [{uid: , name: , position: },{...},{...}]\n\nexport const getSupervisedEmployeesList = (user, setSupervisedEmployees) => {\n  const userEmail = user.email;\n  const colRef = db.collection('EmployeeDatabase').where('uid', '!=', null).where('superiorsList', 'array-contains', `${userEmail}`);\n  colRef.get().then(querySnapshot => {\n    const supervisedEmployees = [];\n    querySnapshot.forEach(doc => {\n      supervisedEmployees.push(doc.data());\n    });\n    setSupervisedEmployees(supervisedEmployees);\n  }).catch(error => {\n    alert(`The following error was thrown: ${error}. Please contact support.`);\n  });\n}; // Upload a file to Firebase Storage and get back a link - request file name and folder name (use UID)\n\nexport const uploadFileToStorage = (field, file, fileName, folderName, setUploading, setFileSrc, collectionName, setOpen) => {\n  if (file) {\n    setUploading(true);\n    setFileSrc('');\n    const storageRef = storage.ref();\n    const imageRef = storageRef.child(`${folderName}/${fileName}.${file.name.split('.').pop()}`);\n    imageRef.put(file).then(() => {\n      imageRef.getDownloadURL().then(url => {\n        const uid = folderName;\n        const docRef = db.collection(collectionName).doc(uid);\n        docRef.get().then(doc => {\n          if (doc.exists) docRef.update({\n            [field]: url\n          });else docRef.set({\n            [field]: url\n          });\n        }).catch(error => docRef.set({\n          [field]: url\n        }));\n        setFileSrc(url);\n        setUploading(false);\n        if (setOpen) setOpen(true);\n      });\n    }).catch(error => {\n      alert(`The following error was thrown: ${error}. Please contact support.`);\n    });\n  } else {\n    alert(`Please select a file first`);\n  }\n}; // Get a list of all employees other than the DB adminstrator\n\nexport const getAllEmployeesList = setAllEmployees => {\n  const colRef = db.collection('EmployeeDatabase');\n  colRef.get().then(col => {\n    if (col) {\n      const allDocsData = col.docs.map(doc => {\n        const data = doc.data();\n        return { ...data,\n          email: doc.id\n        };\n      });\n      setAllEmployees(allDocsData);\n    } else console.log('Collection does not exist');\n  }).catch(error => alert(`The following error was thrown: ${error}. Please contact support.`));\n};","map":{"version":3,"sources":["/Users/sidharthchoudhary/nexusar-website/src/services/firestore-queries.js"],"names":["db","storage","addEmployeeUserIDToDB","user","collection","doc","email","update","uid","checkEmployeeExists","setIsEmployee","userEmail","docRef","get","then","exists","catch","error","alert","postEmployeePersonalInfo","formData","getEmployeePersonalInfo","setPersonalData","data","postEmployeeAcademicInfo","set","getEmployeeAcademicInfo","setAcademicData","postEmployeeWorkInfo","getEmployeeWorkInfo","setWorkData","getEmployeeProprietaryWorkInfo","setProprietaryWorkData","postEmployeeSkillInfo","getEmployeeSkillInfo","setSkillData","postEmployeeBankInfo","getEmployeeBankInfo","setBankData","getSupervisedEmployeesList","setSupervisedEmployees","colRef","where","querySnapshot","supervisedEmployees","forEach","push","uploadFileToStorage","field","file","fileName","folderName","setUploading","setFileSrc","collectionName","setOpen","storageRef","ref","imageRef","child","name","split","pop","put","getDownloadURL","url","getAllEmployeesList","setAllEmployees","col","allDocsData","docs","map","id","console","log"],"mappings":"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","sourcesContent":["import { db, storage } from '../services/firebase.js';\n\n// Add uid for a valid employee to employee database\nconst addEmployeeUserIDToDB = (user) => {\n  db.collection('EmployeeDatabase').doc(user.email).update({ uid: user.uid });\n};\n\n// Check if employee is valid or not\nexport const checkEmployeeExists = (user, setIsEmployee) => {\n  const userEmail = user.email;\n  const docRef = db.collection('EmployeeDatabase').doc(userEmail);\n  docRef\n    .get()\n    .then((doc) => {\n      if (doc.exists) {\n        setIsEmployee(true);\n        addEmployeeUserIDToDB(user);\n      } else setIsEmployee(false);\n    })\n    .catch((error) => alert(`The following error was thrown: ${error}. Please contact support.`));\n};\n\n// Employee Personal Information\nexport const postEmployeePersonalInfo = (uid, formData) => {\n  db.collection('EmployeePersonalInfo').doc(uid).update(formData);\n};\n\nexport const getEmployeePersonalInfo = (uid, setPersonalData) => {\n  const docRef = db.collection('EmployeePersonalInfo').doc(uid);\n  docRef\n    .get()\n    .then((doc) => {\n      if (doc.exists) setPersonalData(doc.data());\n    })\n    .catch((error) => alert(`The following error was thrown: ${error}. Please contact support.`));\n};\n\n// Employee Academic Information\nexport const postEmployeeAcademicInfo = (uid, formData) => {\n  db.collection('EmployeeAcademicInfo').doc(uid).set(formData);\n};\n\nexport const getEmployeeAcademicInfo = (uid, setAcademicData) => {\n  const docRef = db.collection('EmployeeAcademicInfo').doc(uid);\n  docRef\n    .get()\n    .then((doc) => {\n      if (doc.exists) setAcademicData(doc.data());\n    })\n    .catch((error) => alert(`The following error was thrown: ${error}. Please contact support.`));\n};\n\n// Employee Work Information\nexport const postEmployeeWorkInfo = (uid, formData) => {\n  db.collection('EmployeeWorkInfo').doc(uid).set(formData);\n};\n\nexport const getEmployeeWorkInfo = (uid, setWorkData) => {\n  const docRef = db.collection('EmployeeWorkInfo').doc(uid);\n  docRef\n    .get()\n    .then((doc) => {\n      if (doc.exists) setWorkData(doc.data());\n    })\n    .catch((error) => alert(`The following error was thrown: ${error}. Please contact support.`));\n};\n\nexport const getEmployeeProprietaryWorkInfo = (userEmail, setProprietaryWorkData) => {\n  const docRef = db.collection('EmployeeDatabase').doc(userEmail);\n  docRef\n    .get()\n    .then((doc) => {\n      if (doc.exists) setProprietaryWorkData(doc.data());\n    })\n    .catch((error) => alert(`The following error was thrown: ${error}. Please contact support.`));\n};\n\n// Employee Skill Information\nexport const postEmployeeSkillInfo = (uid, formData) => {\n  db.collection('EmployeeSkillInfo').doc(uid).set(formData);\n};\n\nexport const getEmployeeSkillInfo = (uid, setSkillData) => {\n  const docRef = db.collection('EmployeeSkillInfo').doc(uid);\n  docRef\n    .get()\n    .then((doc) => {\n      if (doc.exists) setSkillData(doc.data());\n    })\n    .catch((error) => alert(`The following error was thrown: ${error}. Please contact support.`));\n};\n\n// Employee Bank Information\nexport const postEmployeeBankInfo = (uid, formData) => {\n  db.collection('EmployeeBankInfo').doc(uid).set(formData);\n};\n\nexport const getEmployeeBankInfo = (uid, setBankData) => {\n  const docRef = db.collection('EmployeeBankInfo').doc(uid);\n  docRef\n    .get()\n    .then((doc) => {\n      if (doc.exists) setBankData(doc.data());\n    })\n    .catch((error) => alert(`The following error was thrown: ${error}. Please contact support.`));\n};\n\n// List all supervised employees under an employee\n// Send data back as - List of Objects - [{uid: , name: , position: },{...},{...}]\nexport const getSupervisedEmployeesList = (user, setSupervisedEmployees) => {\n  const userEmail = user.email;\n  const colRef = db\n    .collection('EmployeeDatabase')\n    .where('uid', '!=', null)\n    .where('superiorsList', 'array-contains', `${userEmail}`);\n  colRef\n    .get()\n    .then((querySnapshot) => {\n      const supervisedEmployees = [];\n      querySnapshot.forEach((doc) => {\n        supervisedEmployees.push(doc.data());\n      });\n      setSupervisedEmployees(supervisedEmployees);\n    })\n    .catch((error) => {\n      alert(`The following error was thrown: ${error}. Please contact support.`);\n    });\n};\n\n// Upload a file to Firebase Storage and get back a link - request file name and folder name (use UID)\nexport const uploadFileToStorage = (\n  field,\n  file,\n  fileName,\n  folderName,\n  setUploading,\n  setFileSrc,\n  collectionName,\n  setOpen\n) => {\n  if (file) {\n    setUploading(true);\n    setFileSrc('');\n    const storageRef = storage.ref();\n    const imageRef = storageRef.child(`${folderName}/${fileName}.${file.name.split('.').pop()}`);\n    imageRef\n      .put(file)\n      .then(() => {\n        imageRef.getDownloadURL().then((url) => {\n          const uid = folderName;\n          const docRef = db.collection(collectionName).doc(uid);\n\n          docRef\n            .get()\n            .then((doc) => {\n              if (doc.exists) docRef.update({ [field]: url });\n              else docRef.set({ [field]: url });\n            })\n            .catch((error) => docRef.set({ [field]: url }));\n\n          setFileSrc(url);\n          setUploading(false);\n          if (setOpen) setOpen(true);\n        });\n      })\n      .catch((error) => {\n        alert(`The following error was thrown: ${error}. Please contact support.`);\n      });\n  } else {\n    alert(`Please select a file first`);\n  }\n};\n\n// Get a list of all employees other than the DB adminstrator\nexport const getAllEmployeesList = (setAllEmployees) => {\n  const colRef = db.collection('EmployeeDatabase');\n  colRef\n    .get()\n    .then((col) => {\n      if (col) {\n        const allDocsData = col.docs.map((doc) => {\n          const data = doc.data();\n          return { ...data, email: doc.id };\n        });\n        setAllEmployees(allDocsData);\n      } else console.log('Collection does not exist');\n    })\n    .catch((error) => alert(`The following error was thrown: ${error}. Please contact support.`));\n};\n"]},"metadata":{},"sourceType":"module"}