{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst isNotEmpty = value => value.trim() !== '';\n\nconst useStars = (initLabel, initValue) => {\n  _s();\n\n  const [rating, setRating] = useState({\n    label: '',\n    value: 0\n  });\n  useEffect(() => {\n    if (initLabel && initValue) setRating({\n      label: initLabel,\n      value: initValue\n    });\n  }, [initLabel, initValue]);\n  const labelIsValid = isNotEmpty(rating.label);\n  const labelHasError = !labelIsValid;\n\n  const labelChangeHandler = newLabel => {\n    const newRating = {\n      label: newLabel,\n      value: rating.value\n    };\n    setRating(newRating);\n  };\n\n  const ratingChangeHandler = newValue => {\n    const newRating = {\n      label: rating.label,\n      value: newValue\n    };\n    setRating(newRating);\n  };\n\n  return {\n    rating,\n    ratingChangeHandler,\n    labelChangeHandler,\n    labelHasError\n  };\n};\n\n_s(useStars, \"VmIxXPfAx8jwIaAvaw1WmADUohM=\");\n\nexport default useStars;","map":{"version":3,"sources":["/Users/sidharthchoudhary/nexusar-website/src/hooks/use-stars.js"],"names":["useState","useEffect","isNotEmpty","value","trim","useStars","initLabel","initValue","rating","setRating","label","labelIsValid","labelHasError","labelChangeHandler","newLabel","newRating","ratingChangeHandler","newValue"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAWA,KAAK,CAACC,IAAN,OAAiB,EAA/C;;AAEA,MAAMC,QAAQ,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AAAA;;AACzC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC;AAAEU,IAAAA,KAAK,EAAE,EAAT;AAAaP,IAAAA,KAAK,EAAE;AAApB,GAAD,CAApC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,SAAS,IAAIC,SAAjB,EAA4BE,SAAS,CAAC;AAAEC,MAAAA,KAAK,EAAEJ,SAAT;AAAoBH,MAAAA,KAAK,EAAEI;AAA3B,KAAD,CAAT;AAC7B,GAFQ,EAEN,CAACD,SAAD,EAAYC,SAAZ,CAFM,CAAT;AAIA,QAAMI,YAAY,GAAGT,UAAU,CAACM,MAAM,CAACE,KAAR,CAA/B;AACA,QAAME,aAAa,GAAG,CAACD,YAAvB;;AAEA,QAAME,kBAAkB,GAAIC,QAAD,IAAc;AACvC,UAAMC,SAAS,GAAG;AAAEL,MAAAA,KAAK,EAAEI,QAAT;AAAmBX,MAAAA,KAAK,EAAEK,MAAM,CAACL;AAAjC,KAAlB;AACAM,IAAAA,SAAS,CAACM,SAAD,CAAT;AACD,GAHD;;AAKA,QAAMC,mBAAmB,GAAIC,QAAD,IAAc;AACxC,UAAMF,SAAS,GAAG;AAAEL,MAAAA,KAAK,EAAEF,MAAM,CAACE,KAAhB;AAAuBP,MAAAA,KAAK,EAAEc;AAA9B,KAAlB;AACAR,IAAAA,SAAS,CAACM,SAAD,CAAT;AACD,GAHD;;AAKA,SAAO;AACLP,IAAAA,MADK;AAELQ,IAAAA,mBAFK;AAGLH,IAAAA,kBAHK;AAILD,IAAAA;AAJK,GAAP;AAMD,CA1BD;;GAAMP,Q;;AA4BN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst isNotEmpty = (value) => value.trim() !== '';\n\nconst useStars = (initLabel, initValue) => {\n  const [rating, setRating] = useState({ label: '', value: 0 });\n\n  useEffect(() => {\n    if (initLabel && initValue) setRating({ label: initLabel, value: initValue });\n  }, [initLabel, initValue]);\n\n  const labelIsValid = isNotEmpty(rating.label);\n  const labelHasError = !labelIsValid;\n\n  const labelChangeHandler = (newLabel) => {\n    const newRating = { label: newLabel, value: rating.value };\n    setRating(newRating);\n  };\n\n  const ratingChangeHandler = (newValue) => {\n    const newRating = { label: rating.label, value: newValue };\n    setRating(newRating);\n  };\n\n  return {\n    rating,\n    ratingChangeHandler,\n    labelChangeHandler,\n    labelHasError,\n  };\n};\n\nexport default useStars;\n"]},"metadata":{},"sourceType":"module"}